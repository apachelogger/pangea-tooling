env.DIST = '<%= distribution %>'
env.TYPE = '<%= type %>'
env.JOB_NAME = '<%= project.name %>'
env.PWD_BIND = '/workspace'

// In the template this looks super complicated.
// What this does is first map all values to read "'v'" where v is the value
// and '' is actually part of the string. It then joins them to form an array
// definition.
// end result is: ['a', 'b', 'c']
def architectures = [<%= architectures.map { |x| "'#{x}'" }.join(', ') %>]

cleanNode('master') {
  sh 'env'
  stage('source') {
    parallel(
<% if project&.upstream_scm&.type == 'git' %>
      "git[source]": {
        checkout([$class: 'GitSCM',
                  branches: [[name: '*/<%= project.upstream_scm.branch %>']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [
                    [$class: 'SubmoduleOption',
                      disableSubmodules: false,
                      parentCredentials: false,
                      recursiveSubmodules: true,
                      reference: '',
                      trackingSubmodules: false],
                    [$class: 'ScmName', name: 'source'],
                    [$class: 'RelativeTargetDirectory', relativeTargetDir: 'source']
                  ],
                  submoduleCfg: [],
                  userRemoteConfigs: [[url: '<%= project.upstream_scm.url %>']]])
      },
<% end %>
      "git[packaging]": {
        checkout([$class: 'GitSCM',
                  branches: [[name: '<%= project.packaging_scm.branch %>']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'packaging']],
                  submoduleCfg: [],
                  userRemoteConfigs: [[url: '<%= project.packaging_scm.url %>']]])
      }
    )

<% if project&.upstream_scm&.type == 'tarball' %>
    sh 'mkdir source'
    sh "echo '<%= project.upstream_scm.url %>' > source/url"
<% end %>

    sh '~/tooling/xci/contain.rb /var/lib/jenkins/ci-tooling/xci/sourcer.rb <%= project&.upstream_scm&.type %>'
    sh 'ls -lah'
    dir('build') { stash name: 'source', includes: '*' }
  }
}

stage('binaries') {
  def binaries = [:]

  architectures.each { arch ->
    binaries["binary:${arch}"] = {
      cleanNode(arch) {
        unstash 'source'
        sh 'ls -lah'
        sh '~/tooling/xci/contain.rb /var/lib/jenkins/ci-tooling/xci/binarier.rb $JOB_NAME `pwd` generic'
        junit allowEmptyResults: true, testResults: 'reports/*.xml'
        dir('result') { stash name: "debs_${arch}", includes: '**', allowEmpty: true }
      }
    }
  }

  parallel(binaries)
}

stage('publish') {
  cleanNode('master') {
    lock(label: 'APTLY', quantity: 1) {
      unstash 'source'
      architectures.each { arch ->
        unstash "debs_${arch}"
      }
      sh 'ls -lahR'

      gateway = "ssh://aptly@localhost/home/aptly/aptly.socket"
      sh "~/tooling/ci-tooling/bin/pangea_dput --gateway ${gateway} --repo <%= type %>_<%= distribution %> *.changes"
    }
  }
}

def cleanNode(label = null, body) {
  node(label) {
    deleteDir()
    try {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
        wrap([$class: 'TimestamperBuildWrapper']) {
          body()
        }
      }
    } finally {
      step([$class: 'WsCleanup', cleanWhenFailure: true])
    }
  }
}
