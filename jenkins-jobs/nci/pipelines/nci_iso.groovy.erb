env.DIST='<%= distribution %>'
env.ARCH='<%= architecture %>'
env.TYPE='<%= type %>'
env.METAPACKAGE='<%= metapackage %>'
env.IMAGENAME='<%= imagename %>'
env.NEONARCHIVE='<%= neonarchive %>'

cleanNode('amd64-iso') {
  stage('imager') {
    sh '~/tooling/nci/imager.rb'
  }

  lock('ISO_PUBLISHING') {

  withCredentials([zip(credentialsId: 'gpg.iso.zip', variable: 'GNUPGHOME'),
                   sshUserPrivateKey(credentialsId: 'ssh.jobs.archive.neon',
                                     keyFileVariable: 'SSH_KEY_FILE',
                                     passphraseVariable: '', usernameVariable: '')]) {
    stage('push') {
      sh '~/tooling/nci/imager_push.rb'
    }
    stage('torrent') {
      sh '~/tooling/nci/imager_push_torrent.rb'
    }
  }
}

def cleanNode(label = null, body) {
  node(label) {
    deleteDir()
    try {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
        wrap([$class: 'TimestamperBuildWrapper']) {
          body()
        }
      }
    } finally {
      step([$class: 'WsCleanup', cleanWhenFailure: true])
    }
  }
}
