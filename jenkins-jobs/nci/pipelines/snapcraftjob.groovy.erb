env.APPNAME = "<%= appname %>"
env.DIST = "<%= distribution %>"
env.TYPE = "<%= type %>"
env.DOCKER_ENV_WHITELIST = 'APPNAME'
env.PWD_BIND = '/workspace'

cleanNode('cloud && amd64-snap') {
  stage('clone') {
    git branch: "Neon/<%= type %>", url: "https://invent.kde.org/packaging/snapcraft-kde-applications.git"

    if (fileExists("<%= appname + '/' %>")) {
      sh 'echo Note: building with snapcraft.yaml file found in https://invent.kde.org/packaging/snapcraft-kde-applications Neon/<%= type %> branch.'
      sh 'cp -r <%= appname  %>/* .'
    }
    <% if upstream_scm.type == 'git' %>
    <% elsif upstream_scm.type == 'uscan' %>
    <% else; raise "Unknown upstream scm type on #{upstream_scm}"; end %>
  }

  stage('snapcraft') {
    sh '~/tooling/nci/snapcraft.rb'
    sh 'ls -lah'
  }

  stage('publish') {
    withCredentials([file(credentialsId: 'snapcraft.cfg', variable: 'PANGEA_SNAPCRAFT_CFG_FILE')]) {
      // FIXME: drop this after our new publish.rb is on all nodes (picks up file from env)
      sh 'cp $PANGEA_SNAPCRAFT_CFG_FILE snapcraft.cfg'
      sh '~/tooling/nci/snapcraft_publish.rb'
    }
  }
}

def cleanNode(label = null, body) {
  timeout(time: 2, unit: 'HOURS') {
    node(label) {
      deleteDir()
      try {
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
          wrap([$class: 'TimestamperBuildWrapper']) {
            body()
          }
        }
      } finally {
        step([$class: 'WsCleanup', cleanWhenFailure: true])
      }
    }
  }
}
