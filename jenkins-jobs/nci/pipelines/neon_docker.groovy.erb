env.DIST='<%= distribution %>'
env.ARCH='<%= architecture %>'
env.TYPE='<%= type %>'
env.METAPACKAGE='<%= metapackage %>'
env.IMAGENAME='<%= imagename %>'
env.NEONARCHIVE='<%= neonarchive %>'
<%
# FIXME update when noble is no longer future
tag = type
if is_future
  tag = type + "_noble"
end
%>

cleanNode('amd64-iso') {
  stage('clone') {
  <% if type == 'user' and not is_future %>
    git branch: "Neon/release_jammy", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif type == 'testing' and not is_future %>
    git branch: "Neon/stable_jammy", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif type == 'developer' and not is_future %>
    git branch: "Neon/unstable-development_jammy", url: "https://invent.kde.org/neon/docker-images.git"
  <% if type == 'user' and is_future %>
    git branch: "Neon/release", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif type == 'testing' and is_future %>
    git branch: "Neon/stable", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif type == 'developer' and is_future %>
    git branch: "Neon/unstable-development", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif not is_future %>
    git branch: "Neon/<%= type %>", url: "https://invent.kde.org/neon/docker-images.git"
  <% else %>
    git branch: "Neon/<%= type %>_jammy", url: "https://invent.kde.org/neon/docker-images.git"
  <% end %>
  }

  stage('docker-build') {
    sh 'docker build --tag invent-registry.kde.org/neon/docker-images/plasma:<%= tag %> .'
  }
  stage('docker-push') {
    withCredentials([string(credentialsId: 'dockerhub2', variable: 'TOKEN')]) {
      sh 'docker login --username project_136_bot_e1c05056e435cff70c2c4de3fb0c94c1 --password $TOKEN invent-registry.kde.org'
      sh 'docker push invent-registry.kde.org/neon/docker-images/plasma:<%= tag %>'
  <% if type == 'unstable' %>
      sh 'docker tag invent-registry.kde.org/neon/docker-images/plasma:unstable invent-registry.kde.org/neon/docker-images/plasma:latest'
      sh 'docker push invent-registry.kde.org/neon/docker-images/plasma:latest'
  <% end %>
    }
  }
  stage('docker-clean') {
      sh 'docker rmi invent-registry.kde.org/neon/docker-images/plasma:<%= tag %>'
  }

  stage('clone-all') {
    sh 'rm -rf * .git'
  <% if type == 'user' and not is_future %>
    git branch: "Neon/release_jammy", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif type == 'testing' and not is_future %>
    git branch: "Neon/stable_jammy", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif type == 'developer' and not is_future %>
    git branch: "Neon/unstable-development_jammy", url: "https://invent.kde.org/neon/docker-images.git"
  <% if type == 'user' and is_future %>
    git branch: "Neon/release", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif type == 'testing' and is_future %>
    git branch: "Neon/stable", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif type == 'developer' and is_future %>
    git branch: "Neon/unstable-development", url: "https://invent.kde.org/neon/docker-images.git"
  <% elsif not is_future %>
    git branch: "Neon/<%= type %>", url: "https://invent.kde.org/neon/docker-images.git"
  <% else %>
    git branch: "Neon/<%= type %>_jammy", url: "https://invent.kde.org/neon/docker-images.git"
  <% end %>
  }

  stage('docker-build-all') {
    sh 'sed -i s,neon-desktop,neon-all, Dockerfile'
    sh 'docker build --tag invent-registry.kde.org/neon/docker-images/all:<%= tag %> .'
  }
  stage('docker-push-all') {
    withCredentials([string(credentialsId: 'dockerhub2', variable: 'TOKEN')]) {
      sh 'docker login --username project_136_bot_e1c05056e435cff70c2c4de3fb0c94c1 --password $TOKEN invent-registry.kde.org'
      sh 'docker push invent-registry.kde.org/neon/docker-images/all:<%= type %>'
  <% if type == 'unstable' %>
      sh 'docker tag invent-registry.kde.org/neon/docker-images/all:unstable invent-registry.kde.org/neon/docker-images/all:latest'
      sh 'docker push invent-registry.kde.org/neon/docker-images/all:latest'
  <% end %>
    }
  }
  stage('docker-clean-all') {
      sh 'docker rmi invent-registry.kde.org/neon/docker-images/all:<%= tag %>'
  }
}

def cleanNode(label = null, body) {
  node(label) {
    deleteDir()
    try {
      wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
        wrap([$class: 'TimestamperBuildWrapper']) {
          body()
        }
      }
    } finally {
      step([$class: 'WsCleanup', cleanWhenFailure: true])
    }
  }
}
