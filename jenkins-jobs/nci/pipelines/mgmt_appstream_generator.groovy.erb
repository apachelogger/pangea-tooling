env.DIST = '<%= dist %>'
env.TYPE = '<%= type %>'
env.APTLY_REPOSITORY = '<%= repo %>'
env.PWD_BIND = '/workspace'
env.PANGEA_DOCKER_IMAGE = 'pangea/ubuntu:jammy'

// Only build on cloud nodes because the peristent ones are very slow
// computationally (asgen scales icons/screenshots etc) and also
// not very dependable as load caused by other CIs may cause asgen to flake
// out. As a result even waiting for the cloud node to spin up will most
// of the time be faster than actually working on a persistent node (even when
// the node doesn't have extra load).
lock(label: 'APPSTREAM_GENERATOR', quantity: 1) {
    fancyNode('persistent.arm64.packet-builder-003') {
        ws("workspace-persistent/${env.JOB_NAME}") {
            stage('clone[tooling]') {
                sh '[ -d tooling ] || mkdir tooling'
                dir('tooling') {
                    git branch: 'master', url: 'https://github.com/blue-systems/pangea-tooling'
                }
            }

            stage('clone[extra-metainfo]') {
                sh '[ -d extra-metainfo ] || mkdir extra-metainfo'
                dir('extra-metainfo') {
                    git branch: 'Neon/release', url: 'https://invent.kde.org/sysadmin/neon-appstream-extra-metainfo.git'
                }
            }

            stage('generate') {
                #sh 'docker image pull $PANGEA_DOCKER_IMAGE'
                sh 'tooling/nci/contain.rb $PWD_BIND/tooling/nci/asgen.sh'
            }

            stage('publish') {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh.jobs.archive.neon', keyFileVariable: 'SSH_KEY_FILE', passphraseVariable: '', usernameVariable: '')]) {
                    sh 'tooling/nci/asgen_push.rb'
                }
            }
        }
    }
}

def fancyWrap(body) {
    wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
        wrap([$class: 'TimestamperBuildWrapper']) {
            body()
        }
    }
}

def fancyNode(label = null, body) {
    node(label) {
        fancyWrap {
            body()
        }
    }
}
