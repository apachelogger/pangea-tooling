env.DIST = '<%= dist %>'
env.TYPE = '<%= type %>'
env.APTLY_REPOSITORY = '<%= repo %>'
env.PWD_BIND = '/workspace'
env.PANGEA_DOCKER_IMAGE = 'debian:sid'

fancyNode('master') {
    stage('cache[get]') {
        stash allowEmpty: true, includes: 'run/**', name: 'cache'
    }
}

// Only build on cloud nodes because the peristent ones are very slow
// computationally (asgen scales icons/screenshots etc) and also
// not very dependable as load caused by other CIs may cause asgen to flake
// out. As a result even waiting for the cloud node to spin up will most
// of the time be faster than actually working on a persistent node (even when
// the node doesn't have extra load).
cleanNode('amd64 && cloud') {
    stage('cache[unstash]') {
        sh 'rm -rfv *'
        unstash 'cache'
    }

    stage('clone[tooling]') {
        sh '[ -d tooling ] || mkdir tooling'
        dir('tooling') {
            git branch: 'master', url: 'https://github.com/blue-systems/pangea-tooling'
        }
    }

    stage('clone[extra-metainfo]') {
        sh '[ -d extra-metainfo ] || mkdir extra-metainfo'
        dir('extra-metainfo') {
            git branch: 'Neon/release', url: 'https://invent.kde.org/sitter/neon-appstream-extra-metainfo'
        }
    }

    stage('generate') {
        sh 'docker image pull $PANGEA_DOCKER_IMAGE'
        sh 'tooling/nci/contain.rb $PWD_BIND/tooling/nci/asgen.sh'
    }

    stage('publish') {
        withCredentials([sshUserPrivateKey(credentialsId: 'ssh.jobs.archive.neon', keyFileVariable: 'SSH_KEY_FILE', passphraseVariable: '', usernameVariable: '')]) {
            sh 'tooling/nci/asgen_push.rb'
        }
    }

    stage('cache[new]') {
        // NB: we do not persist the export/ directory. This has two primary effects:
        // a) stashing is fairly fast
        // b) on subsequent runs export/ may not be fully populated
        // asgen only exports "new" data, so when it detects no change export/ will be
        // kind of empty. This basically allows us to skip asgen_push runs. BUT!
        // It also means that when rsyncing data to metadata.neon.kde.org we can't use
        // --delete since we'd drop still valid data. If and when the stash gets cleaned
        // out metadata also needs to get cleaned out!
        // In the grand scheme of things this is more efficient than stashing the export
        // but complicates the relationship between the two data sets. When in doubt
        // wipe all data and regenerate from scratch. That always creates a full data set.
        stash allowEmpty: false, includes: 'run/db/**, run/cache/**', name: 'new-cache'
    }
}

fancyNode('master') {
    stage('cache[set]') {
        sh 'rm -rfv *'
        unstash 'new-cache'
    }
}

def fancyWrap(body) {
    wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
        wrap([$class: 'TimestamperBuildWrapper']) {
            body()
        }
    }
}

def fancyNode(label = null, body) {
    node(label) {
        fancyWrap {
            body()
        }
    }
}

def cleanNode(label = null, body) {
    node(label) {
        deleteDir()
        try {
            fancyWrap {
                body()
            }
        } finally {
            step([$class: 'WsCleanup', cleanWhenFailure: true])
        }
    }
}
