#!/usr/bin/env ruby
#
# frozen_string_literal: true
#
# Copyright (C) 2017 Harald Sitter <sitter@kde.org>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) version 3, or any
# later version accepted by the membership of KDE e.V. (or its
# successor approved by the membership of KDE e.V.), which shall
# act as a proxy defined in Section 6 of version 3 of the license.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.  If not, see <http://www.gnu.org/licenses/>.

require_relative 'lib/paths' # Drop the overlay from the PATH env.

# Drops excessively verbose makefile setting from cmake invocations.
# With the verbosity enabled the entire CC lines including all -Ds
# are printed, which is undesirable as this is a WHOLE lot of information.

unless File.exist?("#{WORKSPACE}/cmake_verbose_makefile")
  ARGV.reject! { |x| x.start_with?('-DCMAKE_VERBOSE_MAKEFILE') }
end
if File.exist?("#{WORKSPACE}/adt_disabled")
  # But only if this is a configure run, not a script run!
  ex_markers = %w[-E --build --find-package]
  in_all = ARGV.any? { |x| x.start_with?('-DCMAKE_INSTALL_PREFIX') }
  ex_none = ex_markers.none? { |x| ARGV.any? { |arg| arg.start_with?(x) } }
  if in_all && ex_none
    ARGV << "-DBUILD_TESTING=OFF"
  end
end
exec('cmake', *ARGV)
