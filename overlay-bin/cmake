#!/usr/bin/env ruby
#
# frozen_string_literal: true
#
# SPDX-FileCopyrightText: 2017-2020 Harald Sitter <sitter@kde.org>
# SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL

require_relative 'lib/paths' # Drop the overlay from the PATH env.

# Drops excessively verbose makefile setting from cmake invocations.
# With the verbosity enabled the entire CC lines including all -Ds
# are printed, which is undesirable as this is a WHOLE lot of information.

unless File.exist?("#{WORKSPACE}/cmake_verbose_makefile")
  ARGV.reject! { |x| x.start_with?('-DCMAKE_VERBOSE_MAKEFILE') }
  ARGV.reject! { |x| x.start_with?('-DCMAKE_AUTOGEN_VERBOSE') }
end

# Force a cmake build type as opposed to distro cflags. This notably makes it
# possible for cmake configs (such as Qt's) to detect this as a release type and
# inject flags accordingly (e.g. -DNDEBUG)
is_ubuntu = File.read('/etc/os-release').include?('ubuntu')
is_release_lts = ENV.fetch('TYPE', '') == 'release-lts'
is_arm = %w[armhf arm64].any? { |x| ENV.fetch('NODE_LABELS', '').include?(x) }
if !ENV.key?('PANGEA_NO_BUILD_TYPE') && is_ubuntu && (is_release_lts || is_arm)
  warn 'Tooling: forcing build type'
  found_type = ARGV.reject! { |x| x.start_with?('-DCMAKE_BUILD_TYPE') }
  ARGV.unshift('-DCMAKE_BUILD_TYPE=RelWithDebInfo') if found_type
end

if File.exist?("#{WORKSPACE}/adt_disabled")
  # But only if this is a configure run, not a script run!
  ex_markers = %w[-E --build --find-package]
  in_all = ARGV.any? { |x| x.start_with?('-DCMAKE_INSTALL_PREFIX') }
  ex_none = ex_markers.none? { |x| ARGV.any? { |arg| arg.start_with?(x) } }
  if in_all && ex_none
    warn "Tooling: injecting -DBUILD_TESTING=OFF; this build doesn't have ADT"
    ARGV.unshift('-DBUILD_TESTING=OFF')
  end
end
warn "Executing: cmake #{ARGV.join(' ')}"
exec('cmake', *ARGV)
